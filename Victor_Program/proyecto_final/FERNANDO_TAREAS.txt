#config.py
# Archivo de configuración para el proyecto final

class Config:
    # Tamaño de la ventana
    ventanaAncho = 735
    ventanaAlto = 1033
    deltaTiempo = 0.0167  # Este valor es para 60 FPS
    pantallaTitulo = "Jardín Zen - Fase 1"
    
    # Potencia de riego
    potenciaRiego = 10
    

    # Rutas de los recursos
    imgFolder = "img"
    spritesFile = "sprites.png"
    fondo = "fondo.jpeg"
    
    escala = 20  # Escala de los sprites
    
    # Coordenadas iniciales (x, y) y finales (x2, y2)
    coordenadas = {
        'fondo': (0, 0, 735, 1033),
        'macetaCafe': (50, 348, 247, 524),
        'macetaNegra': (50, 553, 247, 730),
        'regadera': (1445, 388, 1849, 637),
        'plantaFase3': (9, 759, 298, 884),
        'plantaFase2': (9, 892, 298, 1007),
        'plantaFase1': (50, 1016, 267, 1110)
    }

    # Función para calcular las dimensiones a partir de las coordenadas iniciales y finales
    def calcularDimensiones(coord):
        return coord[2] - coord[0], coord[3] - coord[1]

    # Centro vertical (y) para cada sprite
    centroSprite = {
        'macetaCafe': (524 + 348) // 2,
        'macetaNegra': (730 + 553) // 2,
        'regadera': (637 + 388) // 2,
        'plantaFase3': 854,
        'plantaFase2': 997,
        'plantaFase1': 1099
    }

    # Tamaños calculados utilizando la función `calcularDimensiones`
    tamanos = {
        'macetaCafe': calcularDimensiones(coordenadas['macetaCafe']),
        'macetaNegra': calcularDimensiones(coordenadas['macetaNegra']),
        'regadera': calcularDimensiones(coordenadas['regadera']),
        'plantaFase3': calcularDimensiones(coordenadas['plantaFase3']),
        'plantaFase2': calcularDimensiones(coordenadas['plantaFase2']),
        'plantaFase1': calcularDimensiones(coordenadas['plantaFase1'])
    }

    # Posiciones iniciales en pantalla
    posiciones = {
        'huerto': (305, 600),
        'fotoFondo': (0, 0),
        'macetaCafe': (322, 615),
        'macetaNegra': (300, 100),
        'regadera': (392, 464),
        'plantaFase3': (600, 300),
        'plantaFase2': (400, 300),
        'plantaFase1': (55, 666)
    }


# Tienda de items
    items = [
        {
            id: 'macetaCafe',
            'nombre': 'Maceta Café',
            'precio': 100
        },
        {
            id: 'macetaNegra',
            'nombre': 'Maceta Negra',
            'precio': 150
        },
        {
            id: 'plantaFase1',
            'nombre': 'Mini palmera',
            'precio': 150
        }
    ]
#--------------------------------------------------
#finanzas.py
import time

class Finanzas:
    def __init__(self, saldoaInicial=50):
        self.saldo = saldoaInicial
        self.ultimaVez = time.time()

    def recolectarMonedas(self, ahorros):
        self.saldo += ahorros
        print(f"Has recolectado {ahorros} monedas! Saldo actual: {self.saldo}")

    def reducirSaldo(self, costo):
        if self.saldo >= costo:
            self.saldo -= costo
            return True
        return False

    def dineroPorTiempo(self):
        presente = time.time()
        tiempoTranscurrido = presente - self.ultimaVez
        self.ultimaVez = presente  # Actualiza el último tiempo de chequeo
        minutos = tiempoTranscurrido / 60
        monedasPorMinuto = int(minutos) / 10
        monedasPorHora = int(minutos) / 60 * 2  # Ganancia de 2 monedas por hora
        ganancias = int(monedasPorMinuto + monedasPorHora)
        if ganancias > 0:
            self.recolectarMonedas(ganancias)
            print(f"¡Ganaste {ganancias} monedas mientras no estabas!")
        else:
            print("¡Volviste pronto!")
    
    def chequearRecompensaTiempo(self, intervalo=10):
        presente = time.time()
        if presente - self.ultimaVez >= intervalo:
            self.ultimaVez = presente  # Actualiza el último tiempo de recompensa
            self.recolectarMonedas(1)  # Añade monedas cada intervalo
    
    def obtenerSaldo(self):
        return self.saldo

#--------------------------------------------------
#inventario.py
# inventario.py
import pygame
from config import Config
from sprites import *

class Inventario:
    def __init__(self, pantalla,finanzas,huerto, capacidad=10):
        self.pantalla = pantalla
        self.finanzas = finanzas
        self.saldo = finanzas.saldo
        self.huerto = huerto   
        self.capacidad = capacidad
        self.slots = [{'id': None, 'cantidad': 0} for _ in range(capacidad)]
        self.activa = False
        self.dialogoActivo = False
        self.fuente = pygame.font.Font(None, 24)
        self.hoveredItemIndex = None  # Índice del slot sobre el que está el cursor

    def agregarItem(self, item_id, cantidad=1):
        for slot in self.slots:
            if slot['id'] == item_id:
                slot['cantidad'] += cantidad
                return True
            elif slot['id'] is None:
                slot['id'] = item_id
                slot['cantidad'] = cantidad
                return True
        return False

    def quitarItem(self, item_id, cantidad=1):
        for slot in self.slots:
            if slot['id'] == item_id and slot['cantidad'] >= cantidad:
                slot['cantidad'] -= cantidad
                if slot['cantidad'] == 0:
                    slot['id'] = None
                return True
        return False

    def renderizar(self):
        if not self.activa:
            return
        
        altura_fondo = 60 + 30 * self.capacidad  # Ajuste dinámico del fondo según la cantidad de slots
        fondoInventario = pygame.Surface((300, altura_fondo))
        fondoInventario.fill((139, 69, 19))  # Marrón tipo madera
        rectFondoInventario = fondoInventario.get_rect(center=(Config.ventanaAncho // 2, Config.ventanaAlto // 2))
        self.pantalla.blit(fondoInventario, rectFondoInventario.topleft)
        pygame.draw.rect(self.pantalla, (255, 255, 255), rectFondoInventario, 3)  # Borde blanco

        textoTitulo = self.fuente.render("Inventario", True, (255, 255, 255))
        self.pantalla.blit(textoTitulo, (rectFondoInventario.left + 10, rectFondoInventario.top + 10))

        for i, slot in enumerate(self.slots):
            y_pos = rectFondoInventario.top + 50 + i * 30
            infoItem = f"{slot['id'] if slot['id'] else 'Vacío'}  x {slot['cantidad']}" if slot['id'] else "Vacío"
            colorTexto = (255, 255, 255) if i != self.hoveredItemIndex else (200, 200, 200)
            textoSlot = self.fuente.render(infoItem, True, colorTexto)
            self.pantalla.blit(textoSlot, (rectFondoInventario.left + 10, y_pos))

        if self.dialogoActivo and self.hoveredItemIndex is not None:
            self.renderizarDialogo()
    
    def renderizarDialogo(self):
        dialogo_fondo = pygame.Surface((200, 100))
        dialogo_fondo.fill((255, 250, 250))  # Fondo claro para el diálogo
        rectDialogo = dialogo_fondo.get_rect(center=(Config.ventanaAncho // 2, Config.ventanaAlto // 2))
        self.pantalla.blit(dialogo_fondo, rectDialogo.topleft)

        opciones = ["Plantar", "Vender"]
        for i, opcion in enumerate(opciones):
            texto_opcion = self.fuente.render(opcion, True, (0, 0, 0))
            self.pantalla.blit(texto_opcion, (rectDialogo.left + 10, rectDialogo.top + 10 + i * 30))


    def venderItem(self, item_id):
        # Encuentra el artículo en la lista de items
        item = next((item for item in Config.items if item[id] == item_id), None)
        if item:
            precio = item['precio']
            if self.quitarItem(item_id):
                self.finanzas.recolectarMonedas(precio)
                print(f"Vendido: {item['nombre']} por ${precio} y tu Saldo actual: {self.saldo}")
            else:
                print(f"No se pudo vender {item['nombre']}")
        else:
            print("Ítem no encontrado.")
    
    def agregarItemAHuerto(self, item_id):
        if item_id == 'macetaCafe' or item_id == 'macetaNegra':
            maceta = Maceta(item_id)
            self.huerto.agregarMaceta(maceta)
        elif item_id == 'plantaFase1':
            planta = Planta(item_id)
            if not self.huerto.plantarEnMaceta(planta):
                print("No hay macetas disponibles para plantar")
        else:
            print("No se puede plantar este ítem")
        self.quitarItem(item_id)
    
    
    
    def manejarEventos(self, eventos):
        if not self.activa:
            return
        
        mouse_x, mouse_y = pygame.mouse.get_pos()
        rectFondoInventario = pygame.Rect(0, 0, 300, 60 + 30 * self.capacidad)
        rectFondoInventario.center = (Config.ventanaAncho // 2, Config.ventanaAlto // 2)
        
        self.hoveredItemIndex = None
        for i, slot in enumerate(self.slots):
            y_pos = rectFondoInventario.top + 50 + i * 30
            item_rect = pygame.Rect(rectFondoInventario.left + 10, y_pos, 280, 30)
            if item_rect.collidepoint(mouse_x, mouse_y):
                self.hoveredItemIndex = i  # Identifica el ítem sobre el que se encuentra el cursor
                break  # Termina el loop una vez que se encuentra el ítem hovered

        for evento in eventos:
            if evento.type == pygame.MOUSEBUTTONDOWN and self.hoveredItemIndex is not None:
                # Solo muestra el diálogo si el ítem no es "Vacío"
                item_id = self.slots[self.hoveredItemIndex]['id']
                if item_id is not None:
                    self.mostrarDialogo(item_id)

        if self.dialogoActivo:
            self.manejarEventosDialogo(eventos)

    def manejarEventosDialogo(self, eventos):
        for evento in eventos:
            if evento.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                # Suponiendo que las opciones están dibujadas a una altura de 30 pixels cada una
                rectDialogo = pygame.Rect(Config.ventanaAncho // 2 - 100, Config.ventanaAlto // 2 - 50, 200, 100)
                if rectDialogo.collidepoint(x, y):
                    index = (y - rectDialogo.top) // 30
                    if index == 0:  # Plantar
                        self.agregarItemAHuerto(self.opcionSeleccionada)
                    elif index == 1:  # Vender
                        self.venderItem(self.opcionSeleccionada)
                    self.dialogoActivo = False
                    
    def toggle_activa(self):
        self.activa = not self.activa

    def mostrarDialogo(self, item_id):
        self.dialogoActivo = True
        self.opcionSeleccionada = item_id
#--------------------------------------------------
#juegoModulo.py
# juegoModulo.py
from sprites import JardinZenSprites
import pygame

class Juego():
    def __init__(self, pantalla,finanzas):
        self.pantalla = pantalla
        self.finanzas = finanzas
        self.jardin = JardinZenSprites(self.pantalla, self.finanzas)
    
    def Recalcula(self, eventos):
        # Actualiza el manejo de eventos de todos los sprites
        self.jardin.manejarEventos(eventos)
    
    def Dibuja(self):
        # Dibuja todos los elementos gráficos del juego
        self.jardin.dibujarTodos()

#--------------------------------------------------
#main.py
# main.py
import pygame
import os
from juegoModulo import Juego
from config import Config
from tienda import Tienda
from inventario import Inventario
from finanzas import Finanzas

# Constantes para estados
ESTADO_JUEGO = 'juego'
ESTADO_TIENDA = 'tienda'
ESTADO_INVENTARIO = 'inventario'

pygame.init()
pygame.font.init()

screen = pygame.display.set_mode((Config.ventanaAncho, Config.ventanaAlto))
finanzas = Finanzas()
juego = Juego(screen, finanzas)
huerto = juego.jardin.huerto
inventario = Inventario(screen,finanzas, huerto)
tienda = Tienda(screen,finanzas,inventario)

estadoActual = ESTADO_JUEGO

salir = False

# Cargar y reproducir música de fondo
os.chdir(os.path.dirname(os.path.abspath(__file__)))
pygame.mixer.music.load("ZELDA.mp3")
pygame.mixer.music.play(loops=-1)

while not salir:
    eventos = pygame.event.get()
    for evento in eventos:
        if evento.type == pygame.QUIT:
            salir = True
        if evento.type == pygame.KEYDOWN:
            if evento.key == pygame.K_t:
                if estadoActual != ESTADO_TIENDA:
                    estadoActual = ESTADO_TIENDA
                    tienda.activa = True
                    inventario.activa = False
                else:
                    estadoActual = ESTADO_JUEGO
                    tienda.activa = False
            if evento.key == pygame.K_i:
                if estadoActual != ESTADO_INVENTARIO:
                    estadoActual = ESTADO_INVENTARIO
                    inventario.activa = True
                    tienda.activa = False
                else:
                    estadoActual = ESTADO_JUEGO
                    inventario.activa = False
            if evento.key == pygame.K_ESCAPE:
                salir = True

    screen.fill((0, 0, 0))

    if estadoActual == ESTADO_JUEGO:
        juego.Recalcula(eventos)
        juego.Dibuja()
        finanzas.chequearRecompensaTiempo()
    elif estadoActual == ESTADO_TIENDA:
        tienda.manejarEventos(eventos)
        tienda.renderizar()
    elif estadoActual == ESTADO_INVENTARIO:
        inventario.manejarEventos(eventos)
        inventario.renderizar()

    pygame.display.flip()
    pygame.time.wait(int(Config.deltaTiempo * 1000))

pygame.quit()

#--------------------------------------------------
#sprites.py
import os
import pygame
import random
from config import Config

debug = False

def depurarSprite(nombre, coordenadas, posicion, escala, tamanos, numero_objeto):
    x1, y1, x2, y2 = coordenadas
    # Colores
    cyan = "\033[36m"
    green = "\033[32m"
    yellow = "\033[33m"
    magenta = "\033[35m"
    reset = "\033[0m"
    
    
    
    if debug == True:
        print(f"Depurando {nombre}:")
        print(f"  {cyan}Coordenadas{reset} | x1: {green}{x1}{reset}, y1: {green}{y1}{reset}, x2: {green}{x2}{reset}, y2: {green}{y2}{reset}")
        print(f"  Posición inicial - {magenta}{posicion}{reset}")
        print(f"  Escala aplicada - {yellow}{escala}%{reset}")
        print(f"  Dimensiones después de escalar - Ancho: {yellow}{tamanos[0]}{reset}, Alto: {yellow}{tamanos[1]}{reset}")
        print(f"  Número de objeto: {magenta}{numero_objeto}{reset}")
    else:
        pass



def redimensionarSprite(sprite, escala):
    """ Redimensiona un sprite según la escala dada """
    anchura, altura = sprite.get_size()
    nuevaAnchura = int(anchura * escala / 100)
    nuevaAltura = int(altura * escala / 100)
    return pygame.transform.scale(sprite, (nuevaAnchura, nuevaAltura))


def calcularPosicionX(maceta, planta):
    # Calcular el centro horizontal de la maceta y de la planta
    centro_x_maceta = maceta.posicion[0] + maceta.sprite.get_width() / 2
    centro_x_planta = planta.sprite.get_width() / 2
    
    # Ajustar la posición x de la planta para que quede centrada con la maceta
    nueva_posicion_x = centro_x_maceta - centro_x_planta
    return nueva_posicion_x


def calcularPosicionY(maceta, planta):
    # Usar centroSprite para el ajuste vertical
    ajuste_y = Config.centroSprite[maceta.tipoMaceta] - Config.centroSprite[planta.nombreSprite]
    nueva_posicion_y = maceta.posicion[1] + ajuste_y
    
    # Ajustar para que el borde inferior de la planta quede justo sobre el borde superior de la maceta
    nueva_posicion_y -= planta.sprite.get_height() / 2
    
    return nueva_posicion_y


class SpriteSheet:
    def __init__(self, nombreArchivo):
        """Clase para manejar el sprite sheet"""
        rutaCompleta = os.path.join(os.path.dirname(__file__), Config.imgFolder, nombreArchivo)
        self.sheet = pygame.image.load(rutaCompleta).convert_alpha()
        
    def obtenerSprite(self, x, y, ancho, alto):
        """ Extrae un sprite de las coordenadas x, y con una anchura y altura dadas"""
        sprite = pygame.Surface((ancho, alto), pygame.SRCALPHA)
        sprite.blit(self.sheet, (0, 0), (x, y, ancho, alto))
        return sprite


class SpriteArrastrable:
    def __init__(self, sprite, posicion):
        self.sprite = sprite
        self.posicion = posicion
        self.estaArrastrando = False
        self.desplazamientoX = 0
        self.desplazamientoY = 0
        self.movil = True # Si el objeto se puede mover

    def ManejarEventoArrastrable(self, evento):
        if not self.movil:
            return
        if evento.type == pygame.MOUSEBUTTONDOWN and self.sprite.get_rect(topleft=self.posicion).collidepoint(evento.pos):
            self.estaArrastrando = True
            self.desplazamientoX = self.posicion[0] - evento.pos[0]
            self.desplazamientoY = self.posicion[1] - evento.pos[1]
        elif evento.type == pygame.MOUSEBUTTONUP:
            self.estaArrastrando = False
        elif evento.type == pygame.MOUSEMOTION and self.estaArrastrando:
            self.posicion = (evento.pos[0] + self.desplazamientoX, evento.pos[1] + self.desplazamientoY)

    def Dibujar(self, pantalla):
        pantalla.blit(self.sprite, self.posicion)

class Fondo:
    def __init__(self):
        x,y,ancho,alto = Config.coordenadas['fondo']
        sprite = SpriteSheet(Config.fondo).obtenerSprite(x, y, ancho, alto)
        self.sprite = redimensionarSprite(sprite,100)
        self.posicion = (0,0)
    
    def Dibujar(self, pantalla):
        pantalla.blit(self.sprite, self.posicion)


class Maceta(SpriteArrastrable):
    
    numeroMacetas = 0
    
    def __init__(self,nombreSprite= 'macetaCafe'):
        x,y,x2,y2 = Config.coordenadas[nombreSprite]
        anchura, altura = Config.tamanos[nombreSprite]
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        posicion = Config.posiciones[nombreSprite]
        super().__init__(redimensionarSprite(sprite,Config.escala), posicion)
        
        # Asociación con la planta
        self.contienePlanta = False
        self.planta = None
        # Asociación con la el huerto
        self.enHuerto = False
        self.posicionHuerto = None
        
        # Atributos de la maceta
        self.tipoMaceta = 'cafe'
        self.idMaceta = Maceta.numeroMacetas
        Maceta.numeroMacetas += 1
        
        # Para depuración
        depurarSprite(nombreSprite, (x, y, x2, y2), posicion, Config.escala, Config.tamanos[nombreSprite], Maceta.numeroMacetas)
    
    
    def cambiarMacetaNegra(self):
        x,y,x2,y2 = Config.coordenadas['macetaNegra']
        anchura, altura = Config.tamanos['macetaNegra']
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        self.sprite = redimensionarSprite(sprite,Config.escala)
        self.tipoMaceta = 'negra'
        
        # Para depuración
        depurarSprite('macetaNegra', (x, y, x2, y2), Config.posiciones['macetaNegra'], Config.escala, Config.tamanos['macetaNegra'], Maceta.numeroMacetas)
    
    def plantarPlanta(self, planta):
        if not self.contienePlanta:
            self.planta = planta
            # Estados y variables de planta
            planta.posicion = (self.posicion[0], self.posicion[1] - 10)  # Ajusta la posición de la planta dentro de la maceta
            planta.movil = False  # La planta ya no se puede mover independientemente
            planta.enMaceta = True
            planta.maceta = self
            
            # Estados y variables de la maceta
            self.contienePlanta = True
    
    def Dibujar(self, pantalla):
        return super().Dibujar(pantalla)


class Planta(SpriteArrastrable):
    
    numeroPlantas = 0
    
    def __init__(self,nombreSprite= 'plantaFase1'):
        x,y,x2,y2 = Config.coordenadas[nombreSprite]
        anchura, altura = Config.tamanos[nombreSprite]
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        posicion = Config.posiciones[nombreSprite]
        super().__init__(redimensionarSprite(sprite,Config.escala), posicion)
        self.nombreSprite = nombreSprite
        
        self.enMaceta = False
        self.maceta = None
        self.idPlanta = Planta.numeroPlantas
        self.edad = 1
        self.salud = 100
        self.precio = 100
        self.movil = False
        Planta.numeroPlantas += 1
        
        # Para depuración
        depurarSprite(nombreSprite, (x, y, x2, y2), posicion, Config.escala, Config.tamanos[nombreSprite], Planta.numeroPlantas)

    def faseDosCrecimiento(self):
        self.nombreSprite = 'plantaFase2'
        x,y,x2,y2 = Config.coordenadas[self.nombreSprite]
        anchura, altura = Config.tamanos[self.nombreSprite]
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        self.sprite = redimensionarSprite(sprite,Config.escala)
        
        # Para depuración
        depurarSprite('plantaFase2', (x, y, x2, y2), Config.posiciones['plantaFase2'], Config.escala, Config.tamanos['plantaFase2'], Planta.numeroPlantas)
    
    
    def faseTresCrecimiento(self):
        self.nombreSprite = 'plantaFase3'
        x,y,x2,y2 = Config.coordenadas[self.nombreSprite]
        anchura, altura = Config.tamanos[self.nombreSprite]
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        self.sprite = redimensionarSprite(sprite,Config.escala)
        
        # Para depuración
        depurarSprite('plantaFase3', (x, y, x2, y2), Config.posiciones['plantaFase3'], Config.escala, Config.tamanos['plantaFase3'], Planta.numeroPlantas)
    
    def cambiarFaseCrecimiento(self):
        if self.edad > 100 and self.edad <= 200:
            self.faseDosCrecimiento()
        elif self.edad > 200:
            self.faseTresCrecimiento()
    
    def crecer(self, multiplicador=1, finanzas=None):
        self.edad += multiplicador
        self.cambiarFaseCrecimiento()
        ganancia = 0
        if finanzas:
            ganancia = self.calcularGananciaPorCrecimiento(multiplicador)
            finanzas.recolectarMonedas(ganancia)
        print(f"La edad de la planta es: {self.edad} y has ganado {ganancia} monedas")

    def calcularGananciaPorCrecimiento(self, multiplicador):
        # Suponemos que la ganancia es proporcional al multiplicador y al tipo de planta
        factorSuerte = random.uniform(0.8, 1.2)  # Factor aleatorio para simular suerte
        return multiplicador * (self.precio // 100) * factorSuerte
    
    
    def Dibujar(self, pantalla):
        return super().Dibujar(pantalla)



class Particula:
    def __init__(self, posicion, pantalla):
            self.pantalla = pantalla
            self.posicion = list(posicion)
            self.tiempoVida = 30  # Reducido para que las partículas desaparezcan más rápido
            # Inicialización de la velocidad con una componente vertical hacia arriba
            self.velocidad = [random.uniform(-2, 2), random.uniform(-1, -0.1)]
            self.gravedad = 0.05  # Aceleración debido a la gravedad
            self.tamano = (2, 2)  # Tamaño de la partícula


    def actualizar(self):
        """Actualiza la posición de la partícula, aplica gravedad y reduce su tiempo de vida."""
        if self.tiempoVida > 0:
            self.velocidad[1] += self.gravedad  # Aplica gravedad incrementando la velocidad en y
            self.posicion[0] += self.velocidad[0]
            self.posicion[1] += self.velocidad[1]
            self.tiempoVida -= 1
            self.mostrar()
        else:
            return False  # Indica que debe ser eliminada
        return True

    def mostrar(self):
            """Dibuja la partícula en la pantalla como un pequeño rectángulo (píxel)."""
            pygame.draw.rect(self.pantalla, (0, 122, 255), pygame.Rect(self.posicion[0], self.posicion[1], *self.tamano))



class Regadera(SpriteArrastrable):
    def __init__(self, pantalla, huerto,finanzas,nombreSprite='regadera'):
        x , y, x2, y2 = Config.coordenadas[nombreSprite]
        anchura, altura = Config.tamanos[nombreSprite]
        sprite = SpriteSheet(Config.spritesFile).obtenerSprite(x, y, anchura, altura)
        posicion = Config.posiciones[nombreSprite]
        super().__init__(redimensionarSprite(sprite,Config.escala), posicion)
        self.finanzas = finanzas
        self.huerto = huerto
        self.pantalla = pantalla
        self.particulas = []


    def regarPlanta(self, posicion, planta):
        """Genera partículas en la posición centrada del sprite de la planta y hace crecer la planta."""
        centroX = planta.posicion[0] + planta.sprite.get_width() // 2
        centroY = planta.posicion[1] + planta.sprite.get_height() // 2
        posicion_central = (centroX, centroY)

        for _ in range(20):  # Genera varias partículas para un efecto más denso
            self.particulas.append(Particula(posicion_central, self.pantalla))
        planta.crecer(Config.potenciaRiego,self.finanzas)
        # Restablece la regadera a su posición original
        self.posicion = Config.posiciones['regadera']

    def actualizarParticulas(self):
        """Actualiza y filtra las partículas activas."""
        self.particulas = [p for p in self.particulas if p.actualizar()]

    def ManejarEventoArrastrable(self, evento):
        super().ManejarEventoArrastrable(evento)
        if evento.type == pygame.MOUSEBUTTONUP:
            # Verificar si la regadera está sobre alguna planta
            for maceta in self.huerto.macetas:
                if maceta.contienePlanta and self.sprite.get_rect(topleft=self.posicion).colliderect(maceta.planta.sprite.get_rect(topleft=maceta.planta.posicion)):
                    posicionPlanta = (maceta.posicion[0], maceta.posicion[1] - 20)
                    self.regarPlanta(posicionPlanta, maceta.planta)
                    break

    def Dibujar(self, pantalla):
        super().Dibujar(pantalla)
        for particula in self.particulas:
            particula.mostrar()
        self.actualizarParticulas()



class Huerto:
    def __init__(self):
        x, y = Config.posiciones['huerto']
        self.filas = 3
        self.columnas = 3
        self.espacios = [[None for _ in range(self.columnas)] for _ in range(self.filas)]
        self.macetas = []
        self.espacio_x = 75  # Espacio entre columnas
        self.espacio_y = 75  # Espacio entre filas
        self.base_x = x  # Coordenada x inicial
        self.base_y = y  # Coordenada y inicial

    def agregarMaceta(self, maceta):
        # Lógica para colocar la maceta en el huerto
        if not maceta.enHuerto:
            # Encuentra el primer lugar disponible y coloca la maceta allí
            for fila in range(self.filas):
                for columna in range(self.columnas):
                    if self.espacios[fila][columna] is None:
                        self.posicionarEnHuerto(maceta, fila, columna)
                        return True
            print("No hay espacio disponible en el huerto")
            return False

    def plantarEnMaceta(self, planta):
        for maceta in self.macetas:
            if not maceta.contienePlanta:
                maceta.plantarPlanta(planta)
                return True
        print("No hay macetas disponibles para plantar")
        return False

    def posicionarEnHuerto(self, maceta, fila, columna):
        x = self.base_x + columna * self.espacio_x
        y = self.base_y + fila * self.espacio_y
        maceta.posicion = (x, y)
        maceta.enHuerto = True
        maceta.movil = False
        if maceta.contienePlanta:
            maceta.planta.movil = False
        self.espacios[fila][columna] = maceta
        self.macetas.append(maceta)

    def quitarMaceta(self, maceta):
        for fila in range(self.filas):
            for columna in range(self.columnas):
                if self.espacios[fila][columna] == maceta:
                    self.espacios[fila][columna] = None
                    self.macetas.remove(maceta)
                    maceta.enHuerto = False
                    maceta.movil = True
                    if maceta.contienePlanta:
                        maceta.planta.movil = True
                    return True
        return False

    def dibujarHuerto(self, pantalla):
        # Dibuja un fondo de cuadrícula para el huerto
        for fila in range(self.filas):
            for columna in range(self.columnas):
                rect = pygame.Rect(self.base_x + columna * self.espacio_x,
                                   self.base_y + fila * self.espacio_y,
                                   self.espacio_x, self.espacio_y)
                pygame.draw.rect(pantalla, (200, 200, 200), rect, 1)
        # Dibuja las macetas en su posición actual
        for maceta in self.macetas:
            maceta.Dibujar(pantalla)
            if maceta.contienePlanta:
                maceta.planta.Dibujar(pantalla)

    def manejarEventosHuerto(self, eventos):
        """Distribuye eventos a las macetas en el huerto."""
        for evento in eventos:
            for maceta in self.macetas:
                maceta.ManejarEventoArrastrable(evento)
                if maceta.planta:
                    maceta.planta.ManejarEventoArrastrable(evento)



class JardinZenSprites:
    """Clase para gestionar todos los sprites del Jardín Zen."""

    def __init__(self, pantalla,fianzas):
        self.pantalla = pantalla
        self.finanzas = fianzas
        self.fondo = Fondo()
        self.huerto = Huerto() 
        self.regadera = Regadera(pantalla, self.huerto,self.finanzas)
        
        # Inicializar macetas y plantas
        self.inicializarMacetasYPlantas()

    def inicializarMacetasYPlantas(self):
        # Crear y agregar macetas y asociarlas con plantas y ambas con el huerto

        for _ in range(2):
            maceta = Maceta()
            planta = Planta()
            self.huerto.agregarMaceta(maceta)       
            maceta.plantarPlanta(planta)



    def dibujarTodos(self):
        """Dibuja todos los objetos en la pantalla."""
        self.fondo.Dibujar(self.pantalla)
        self.huerto.dibujarHuerto(self.pantalla)
        self.regadera.Dibujar(self.pantalla)

    def manejarEventos(self, eventos):
        """Distribuye eventos a los objetos correspondientes."""
        for evento in eventos:
            self.huerto.manejarEventosHuerto(eventos)
            self.regadera.ManejarEventoArrastrable(evento)
#--------------------------------------------------
#tienda.py
import pygame
from config import Config

class Tienda:
    def __init__(self, pantalla,finanzas, inventario):
        self.pantalla = pantalla
        self.finanzas = finanzas
        self.saldo = finanzas.saldo
        self.inventario = inventario
        self.fuente = pygame.font.Font(None, 24)
        self.articulos = Config.items
        self.activa = False
        self.hoveredItemIndex = None  # Índice del artículo sobre el que está el cursor

    def renderizar(self):
        if not self.activa:
            return

        # Configuración del fondo de la tienda
        fondoTienda = pygame.Surface((300, 200))
        fondoTienda.fill((34, 139, 34))
        rectFondoTienda = fondoTienda.get_rect(center=(Config.ventanaAncho // 2, Config.ventanaAlto // 2))
        self.pantalla.blit(fondoTienda, rectFondoTienda.topleft)
        pygame.draw.rect(self.pantalla, (255, 255, 255), rectFondoTienda, 3)

        # Título de la tienda
        superficieTitulo = self.fuente.render("Tienda de Jardinería", True, (255, 255, 255))
        self.pantalla.blit(superficieTitulo, (rectFondoTienda.left + 10, rectFondoTienda.top + 10))

        # Renderizar cada artículo de la tienda
        for i, articulo in enumerate(self.articulos):
            y_pos = rectFondoTienda.top + 50 + i * 30
            texto = f"{articulo['nombre']} - ${articulo['precio']}"
            colorTexto = (255, 255, 255) if i != self.hoveredItemIndex else (200, 200, 200)  # Cambio de color si es hovered
            superficieTexto = self.fuente.render(texto, True, colorTexto)
            self.pantalla.blit(superficieTexto, (rectFondoTienda.left + 10, y_pos))

    def manejarEventos(self, eventos):
        if not self.activa:
            return
        
        mouse_x, mouse_y = pygame.mouse.get_pos()
        rectFondoTienda = pygame.Rect(0, 0, 300, 200)
        rectFondoTienda.center = (Config.ventanaAncho // 2, Config.ventanaAlto // 2)

        self.hoveredItemIndex = None
        for i, articulo in enumerate(self.articulos):
            y_pos = rectFondoTienda.top + 50 + i * 30
            item_rect = pygame.Rect(rectFondoTienda.left + 10, y_pos, 280, 30)
            if item_rect.collidepoint(mouse_x, mouse_y):
                self.hoveredItemIndex = i

        # Compra de artículo si se hace clic en él y hay saldo suficiente
        for evento in eventos:
            if evento.type == pygame.MOUSEBUTTONDOWN and self.hoveredItemIndex is not None:
                articulo = self.articulos[self.hoveredItemIndex]
                if self.finanzas.reducirSaldo(articulo['precio']):
                    self.inventario.agregarItem(articulo[id], 1)
                    print(f"Comprado: {articulo['nombre']} por ${articulo['precio']} y tu saldo actual es ${self.saldo}")
                else:
                    print("Saldo insuficiente para comprar este artículo.")
    
    def toggle_activa(self):
        self.activa = not self.activa
#--------------------------------------------------